// Code generated by command: go run avx.go. DO NOT EDIT.

#include "textflag.h"

// func accum(acc *[8]uint64, data *byte, key *byte, len uint64)
TEXT Â·accum(SB), NOSPLIT, $0-32
	MOVQ acc+0(FP), AX
	MOVQ data+8(FP), CX
	MOVQ key+16(FP), DX
	MOVQ len+24(FP), BX
	XORQ BP, BP

loop:
	CMPQ        BX, $0x40
	JLT         finalize
	VMOVDQU     (CX), X0
	VMOVDQU     (DX), X1
	VINSERTI128 $0x01, 16(CX), Y0, Y0
	VINSERTI128 $0x01, 16(DX), Y1, Y1
	VPADDD      Y0, Y1, Y1
	VPSHUFD     $0x31, Y1, Y2
	VPADDQ      (AX), Y0, Y0
	VPMULUDQ    Y2, Y1, Y1
	VPADDQ      Y1, Y0, Y0
	VMOVDQU     Y0, (AX)
	VMOVDQU     32(CX), X0
	VINSERTI128 $0x01, 48(CX), Y0, Y0
	VMOVDQU     32(DX), X1
	VINSERTI128 $0x01, 48(DX), Y1, Y1
	VPADDD      Y0, Y1, Y1
	VPSHUFD     $0x31, Y1, Y2
	VPADDQ      32(AX), Y0, Y0
	VPMULUDQ    Y2, Y1, Y1
	VPADDQ      Y1, Y0, Y0
	VMOVDQU     Y0, 32(AX)
	ADDQ        $0x40, CX
	ADDQ        $0x08, DX
	SUBQ        $0x40, BX
	INCQ        BP
	CMPQ        BP, $0x10
	JE          mix
	JMP         loop

mix:
	VMOVDQU     (DX), X1
	VMOVDQU     (AX), Y0
	VINSERTI128 $0x01, 16(DX), Y1, Y1
	VPSRLQ      $0x2f, Y0, Y2
	VPXOR       Y2, Y0, Y0
	VPMULUDQ    Y1, Y0, Y2
	VPSHUFD     $0x31, Y1, Y1
	VPSHUFD     $0x31, Y0, Y0
	VPMULUDQ    Y1, Y0, Y0
	VPXOR       Y0, Y2, Y0
	VMOVDQU     Y0, (AX)
	VMOVDQU     32(DX), X1
	VMOVDQU     32(AX), Y0
	VINSERTI128 $0x01, 48(DX), Y1, Y1
	VPSRLQ      $0x2f, Y0, Y2
	VPXOR       Y2, Y0, Y0
	VPMULUDQ    Y1, Y0, Y2
	VPSHUFD     $0x31, Y1, Y1
	VPSHUFD     $0x31, Y0, Y0
	VPMULUDQ    Y1, Y0, Y0
	VPXOR       Y0, Y2, Y0
	VMOVDQU     Y0, 32(AX)
	XORQ        BP, BP
	MOVQ        key+16(FP), DX
	JMP         loop

finalize:
	CMPQ        BX, $0x00
	JE          ret
	SUBQ        $0x40, CX
	ADDQ        BX, CX
	VMOVDQU     (CX), X0
	VMOVDQU     (DX), X1
	VINSERTI128 $0x01, 16(CX), Y0, Y0
	VINSERTI128 $0x01, 16(DX), Y1, Y1
	VPADDD      Y0, Y1, Y1
	VPSHUFD     $0x31, Y1, Y2
	VPADDQ      (AX), Y0, Y0
	VPMULUDQ    Y2, Y1, Y1
	VPADDQ      Y1, Y0, Y0
	VMOVDQU     Y0, (AX)
	VMOVDQU     32(CX), X0
	VINSERTI128 $0x01, 48(CX), Y0, Y0
	VMOVDQU     32(DX), X1
	VINSERTI128 $0x01, 48(DX), Y1, Y1
	VPADDD      Y0, Y1, Y1
	VPSHUFD     $0x31, Y1, Y2
	VPADDQ      32(AX), Y0, Y0
	VPMULUDQ    Y2, Y1, Y1
	VPADDQ      Y1, Y0, Y0
	VMOVDQU     Y0, 32(AX)

ret:
	RET
